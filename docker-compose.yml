version: "0.0.1"
services:
  database:
    container_name: mysql_db
    image: mysql/mysql-server:latest
    #restart: unless-stopped
    env_file:
      - ./database.env
    environment:
      TZ: 'Asia/Seoul'
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/conf.d:/etc/mysql/conf.d
    networks:
      - backend-net
    healthcheck:
      test: [ "CMD", "mysqladmin", "--user=${MYSQL_USER}", "--password=${MYSQL_PASSWORD}", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  application:
    container_name: was
    restart: on-failure
    build:
      context: ./
      dockerfile: dockerfile
    ports:
      - "8080:8080"
    env_file:
      - ./application.env
    depends_on:
      database:
        condition: service_healthy
    networks:
      - backend-net

  nginx:
    image: nginx:1.15-alpine
    restart: unless-stopped
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - database
    networks:
      - backend-net
      
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - backend-net
networks:
  backend-net:
